name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    # checkout
    - name: Checkout repository code
      uses: actions/checkout@v3

    # install
    - name: Setup PNPM
      if: 
      uses: pnpm/action-setup@v2
      with:
        version: 7.27.0
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        registry-url: 'https://registry.npmjs.org'
    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # get latest version number
    - name: Install semver package
      run: pnpm add semver
    - name: Get latest release version
      id: latest-version
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const semver = require('semver')
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          })
          console.log('releases', releases)
          const versionDates = releases.data
            .map((release) => release.published_at)
            .sort()
          console.log('versionDates', versionDates)
          const latestVersionDate = versionDates[versionDate.length - 1]
          console.log('latestVersionDate', latestVersionDate)
          const latestVersionRecord = releases.data
            .find((release) => release.published_at === latestVersionDate)
          console.log('latestVersionRecord', latestVersionRecord)
          const latestVersion = typeof latestVersionRecord !== 'undefined'
            ? 'v0.0.0'
            : latestVersionRecord.tag_name
          console.log('latestVersion', latestVersion)
          return latestVersion

    # get checkout version number
    - name: Get checkout package version
      id: checkout-version
      run: echo "result=$(jq .version package.json)" >> $GITHUB_OUTPUT

    # temp
    - run: |
        echo ${{ steps.latest-version.outputs.result }} ${{ steps.checkout-version.outputs.result }}

    # # stop or continue
    # - name: Determine if release should continue
    #   if: ${{ steps.latest-version.outputs.result < steps.current-version.outputs.result }}
    #   run: |
    #     echo '::notice::The version committed to main is not newer than the current release'
    #     stopMarker=$(uuidgen)
    #     echo "::stop-commands::$stopMarker"

    # # release to npm
    # - name: Release to NPM
    #   run: pnpm release --dry-run
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

    # # tag release in github
    # - name: Tag release in GitHub
    #   uses: actions/github-script@v6
    #   with:
    #     result-encoding: string
    #     script: |
    #       github.rest.repos.createRelease({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         tag_name: needs.versions.outputs.checkout-version,
    #         draft: true
    #       })
    #       return `Created (draft) release ${needs.versions.outputs.checkout-version}`

name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    # checkout
    - name: Checkout repository code
      uses: actions/checkout@v3

    # install
    - name: Setup PNPM
      if: 
      uses: pnpm/action-setup@v2
      with:
        version: 7.27.0
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        registry-url: 'https://registry.npmjs.org'
    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # get latest version number
    - name: Install semver package
      run: pnpm add semver
    - name: Determine whether the package is a new release version
      id: is-new-release
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const semver = require('semver')
          
          // get latest version
          let latestVersion = 'v0.0.0'
          try {
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            latestVersion =
              typeof latestRelease === 'undefined' ||
              typeof latestRelease.data === 'undefined'
                ? 'v0.0.0'
                : latestRelease.data.tag_name
            console.info(`Found latest release version: ${latestVersion}`)
          } catch (e) {
            console.info(
              'Could not evaluate latest release version, using v0.0.0'
            )
          }

          // get version from package json
          let packageVersion = 'v0.0.0'
          try {
            const packageJsonRecord = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              ref: context.ref
            })
            const packageJson =
              typeof packageJsonRecord === 'undefined' ||
              typeof packageJsonRecord.data === 'undefined'
                ? '{ "version": "v0.0.0" }'
                : Buffer.from(packageJsonRecord.data.content, 'base64').toString()
            const package = JSON.parse(packageJson)
            packageVersion = package.version
            console.info(`Found current package version: ${packageVersion}`)
          } catch (e) {
            console.info(
              'Could not evaluate current package version, using v0.0.0'
            )
          }

          return semver.gt(packageVersion, latestVersion)

    - run: git status

    # release to npm
    - name: Release to NPM
      if: ${{ steps.is-new-release.outputs.result }}
      run: pnpm release --no-git-checks --dry-run
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

    # tag release in github
    # - name: Tag release in GitHub
    #   if: ${{ steps.is-new-release.outputs.result }}
    #   uses: actions/github-script@v6
    #   with:
    #     result-encoding: string
    #     script: |
    #       github.rest.repos.createRelease({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         tag_name: needs.versions.outputs.checkout-version,
    #         draft: true
    #       })
    #       return `Created (draft) release ${needs.versions.outputs.checkout-version}`
